{"version":3,"sources":["logo.svg","Words.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Words","_ref","words","react_default","a","createElement","className","dangerouslySetInnerHTML","__html","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","today","Date","year","getFullYear","month","getMonth","slice","day","getDay","state","words_html","sector","job","age","image","handleChangeWords","bind","assertThisInitialized","handleChangeSector","handleChangeJob","handleChangeAge","e","target","value","replace","setState","html2canvas","document","querySelector","then","canvas","link","href","toDataURL","download","click","_this2","Fragment","name","onChange","placeholder","type","onClick","downloadImage","id","src_Words","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.090951d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Words = ({words}) => <div className=\"words\" dangerouslySetInnerHTML={{__html: words}}></div>\n\nexport default Words;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport html2canvas from \"html2canvas\";\n\nimport Words from './Words.js';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    let today = new Date();\n    let year = today.getFullYear();\n    let month = (\"0\"+(today.getMonth() + 1)).slice(-2);\n    let day = (\"0\"+(today.getDay())).slice(-2); \n    this.state = {\n      words: \"働きたくないでござる\",\n      words_html:\"働きたくないでござる\",\n      sector: \"自宅警備員\",\n      job: \"開発\",\n      age: \"20\",\n      year: year,\n      month: month,\n      day: day,\n      image: \"\"\n    }\n\n    this.handleChangeWords = this.handleChangeWords.bind(this);\n    this.handleChangeSector = this.handleChangeSector.bind(this);\n    this.handleChangeJob = this.handleChangeJob.bind(this);\n    this.handleChangeAge = this.handleChangeAge.bind(this);\n  }\n  \n  handleChangeWords(e){\n    let words = e.target.value;\n    let words_html = words.replace(/\\r?\\n/g, '<br>');\n    \n    this.setState({words: words, words_html: words_html});\n  }\n\n  handleChangeSector(e){\n    let sector = e.target.value;\n    this.setState({sector: sector});\n  }\n  \n  handleChangeJob(e){\n    let job = e.target.value;\n    this.setState({job: job});\n  }\n\n  handleChangeAge(e){\n    let age = e.target.value;\n    this.setState({age: age});\n  }\n\n  downloadImage(){\n    \n    html2canvas(document.querySelector(\"#canvas\")).then(canvas => {\n    let link = document.createElement(\"a\");\n    link.href = canvas.toDataURL(\"image/png\");\n    link.download = \"words.png\";\n    link.click();\n    });\n  }\n\n  render(){\n    return (\n      <React.Fragment>\n        <h1 className=\"heading\">はたらかない言葉たちメーカー</h1>\n        <div className=\"input-field\">\n          <label>言葉</label>\n          <textarea name=\"words\" value={this.state.words} onChange={(e)=>this.handleChangeWords(e)} placeholder=\"here\" />\n          <br />\n          <label>業種</label>\n          <input type=\"text\" value={this.state.sector} onChange={(e)=>this.handleChangeSector(e)} placeholder=\"sector\" />\n          <br />\n          <label>職種</label>\n          <input type=\"text\" value={this.state.job} onChange={(e)=>this.handleChangeJob(e)} placeholder=\"job\" />\n          <br />\n          <label>年齢</label>\n          <select value={this.state.age} onChange={(e)=>this.handleChangeAge(e)}>\n            <option value=\"\"></option>\n            <option value=\"10\">10代</option>\n            <option value=\"20\">20代</option>\n            <option value=\"30\">30代</option>\n            <option value=\"40\">40代</option>\n            <option value=\"50\">50代</option>\n            <option value=\"60\">60代</option>\n            <option value=\"70\">70代</option>\n            <option value=\"80\">80代</option>\n            <option value=\"90\">90代</option>\n          </select>\n          <input type=\"submit\" value=\"submit\" onClick={()=>this.downloadImage()} />\n        </div>\n\n        <div className=\"container\">\n          <div className=\"title\">はたらかない言葉たち</div>\n            <div className=\"canvas-container\">\n              <div id=\"canvas\">\n              <Words words={this.state.words_html} />\n              <div className=\"user-info\">\n                <span className=\"sector\">{this.state.sector}</span>\n                { this.state.sector && this.state.job && <span>／</span> }\n                <span className=\"job\">{this.state.job}</span>\n                { this.state.job && this.state.age && <span>・</span> }\n                { this.state.age && <span className=\"age\"><span className=\"text-combine\">{this.state.age}</span>代</span>}\n              </div>\n            </div>\n            <div className=\"date\">{this.state.year}. {this.state.month}. {this.state.day}</div>\n          </div>\n          \n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}